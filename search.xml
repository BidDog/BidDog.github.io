<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub搭建个人blog</title>
    <url>/2022/11/10/Hexo+github%E6%90%AD%E5%BB%BAblog/</url>
    <content><![CDATA[<p>介绍了此blog的搭建流程。</p>
<span id="more"></span>

<p>大致可以分为三步————Hexo建站、绑定域名和界面美化。  </p>
<p><strong>注意：作者小白，此blog搭建流程参考于搜集到的网络信息，作者对涉及到的Hexo、GitHub和域名解析等都不懂，下文的含义简介均摘自网络。</strong><br><strong>注意：作者笔记本环境为win10。</strong></p>
<hr>
<h1 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a>Hexo建站</h1><p>Hexo：快速、简介且高效的博客框架。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js：是一个基于Chrome V8 引擎的JavaScript运行环境。  </p>
<ul>
<li>Node.js使用了一个事件驱动、非阻塞式I&#x2F;O的模型，使其轻量又高效。</li>
<li>Node.js的包管理器npm，是全球最大的开源库生态系统。</li>
</ul>
<p>官网地址：<a href="http://nodejs.cn/" title="官网">Node.js中文网</a><br>官网地址的下载页面：<a href="http://nodejs.cn/download/" title="下载页面">下载|Node.js中文网</a></p>
<p>打开官网下载页面，选择Windows安装包开始下载，下载完毕后打开，除安装目录自定义设置一路Next即可。</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git：是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<p>官网地址：<a href="https://git-scm.com/" title="官网">Git</a><br>官网地址的下载页面：<a href="https://git-scm.com/downloads" title="下载页面">Git-Downloads</a></p>
<p>在下载页面选择Windows版本安装包，下载完毕后进行安装，作者是除目录和插件全选外，一路Next。<br>安装过程中各个选项的意思，可参考<a href="https://blog.csdn.net/mukes/article/details/115693833" title="Git安装介绍">Git详解安装步骤</a>。</p>
<h2 id="GitHub初始化配置"><a href="#GitHub初始化配置" class="headerlink" title="GitHub初始化配置"></a>GitHub初始化配置</h2><h3 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h3><p>打开安装好的Git Bash，输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxxxxx&quot;</span><br><span class="line">git config --global user.email &quot;xxxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p><strong>注意：<code>xxxxxx</code>是需要自己输入的内容。</strong></p>
<h3 id="生成ssh密匙"><a href="#生成ssh密匙" class="headerlink" title="生成ssh密匙"></a>生成ssh密匙</h3><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>输入完毕后，需要按下多次<code>Enter</code>键。</p>
<h3 id="添加公匙到GitHub仓库"><a href="#添加公匙到GitHub仓库" class="headerlink" title="添加公匙到GitHub仓库"></a>添加公匙到GitHub仓库</h3><h4 id="查看公匙"><a href="#查看公匙" class="headerlink" title="查看公匙"></a>查看公匙</h4><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>复制显示的公匙。</p>
<h4 id="在GitHub仓库添加该公匙"><a href="#在GitHub仓库添加该公匙" class="headerlink" title="在GitHub仓库添加该公匙"></a>在GitHub仓库添加该公匙</h4><p>GitHub官网：<a href="https://github.com/">GitHub</a>  </p>
<ol>
<li>登录后，点击右上角的个人头像，菜单中选择<code>Settings</code>。</li>
<li>网页跳转到个人账户设置界面，左侧的一列选项卡中，选择<code>SSH and GPG keys</code>，右侧界面中点击<code>New SSH key</code>。</li>
<li>在Title文本框中随便输入一个标题，在Key文本框中，粘贴刚刚复制的公匙，点击<code>Add SSH key</code>。</li>
</ol>
<h4 id="在Git-Bash中测试公匙是否正常工作"><a href="#在Git-Bash中测试公匙是否正常工作" class="headerlink" title="在Git Bash中测试公匙是否正常工作"></a>在Git Bash中测试公匙是否正常工作</h4><p>返回Git Bash，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>出现<code>Hey xxxxxx! You&#39;ve successfully authenticated, but GitHub does not \# provide shell access.</code>字样，表示公匙已正常工作。</p>
<h2 id="GitHub中创建仓库"><a href="#GitHub中创建仓库" class="headerlink" title="GitHub中创建仓库"></a>GitHub中创建仓库</h2><ol>
<li><p>在GitHub官网登录后，点击右上角个人头像左侧的<code>+</code>符号，菜单中选择<code>New repository</code>。</p>
</li>
<li><p>在Repository name文本框中输入<code>xxxxxx.github.io</code>。</p>
<p> <strong>注意：<code>xxxxxx</code>必须是GitHub账号的用户名，不可随意填写。</strong></p>
</li>
<li><p>勾选<code>Add a README file</code>，其他保持默认，点击<code>Creat reponsitory</code>。</p>
</li>
</ol>
<h2 id="Hexo搭建Blog"><a href="#Hexo搭建Blog" class="headerlink" title="Hexo搭建Blog"></a>Hexo搭建Blog</h2><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>返回Git Bash，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><p>在想要的路径下新建一个文件夹，该文件夹作为Hexo博客的源文件保存的目录，比如我的是<code>D:\BigDog\Document\GitHub\hexo</code>。</p>
<p>在Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d/BigDog/Document/GitHub/hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p>在Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate # 生成页面</span><br><span class="line">hexo server   # 启动预览</span><br></pre></td></tr></table></figure>
<p><strong>注意：此类命令均需在<code>D:\BigDog\Document\GitHub\hexo</code>目录下执行。</strong></p>
<p>打开浏览器，访问<code>http://localhost:4000</code>，可以看到使用了默认主题的Hexo博客。</p>
<h3 id="Hexo部署到GitHub"><a href="#Hexo部署到GitHub" class="headerlink" title="Hexo部署到GitHub"></a>Hexo部署到GitHub</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改<code>_config.yml</code>文件</h4><ol>
<li><p>打开<code>D:\BigDog\Document\GitHub\hexo</code>目录下的<code>_config.yml</code>文件。</p>
</li>
<li><p>将<code>delpoy</code>部分的文本内容修改如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxxxxx/xxxxxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p> <strong>注意：<code>xxxxxx</code>是GitHub账户的用户名。</strong><br> <strong>注意：注意空格和缩进。</strong></p>
</li>
</ol>
<h4 id="执行部署"><a href="#执行部署" class="headerlink" title="执行部署"></a>执行部署</h4><p>Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy # 部署到GitHub</span><br></pre></td></tr></table></figure>
<p>此时，可通过浏览器访问<code>https://xxxxxx.github.io</code>进入到个人的Hexo博客中。</p>
<h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><p>Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;第一篇文章&quot;</span><br></pre></td></tr></table></figure>
<ol>
<li>通过该命令，Hexo会在<code>D:\BigDog\Document\GitHub\hexo</code>目录下的<code>\source\posts</code>文件夹中生成<code>.md</code>文件，打开该文件即可开始书写。<br> <strong>注意：直接在该文件夹下创建<code>.md</code>文件，或从别处复制粘贴<code>.md</code>文件也是可以的。</strong>  </li>
<li>写完后，通过在Git Bash中输入<code>hexo deploy</code>指令，将文章部署到网页。<br> <strong>注意1：建议使用<code>hexo clean &amp;&amp; hexo deploy</code>组合指令进行部署（缓存可能会对布局造成影响）。</strong><br> <strong>注意2：完成部署后，网页内容需等待一会儿才会更新，个人经验是0-3分钟（<code>Shift+F5</code>清楚缓存或许可能加快本地刷新？）。</strong></li>
</ol>
<p>至此，Hexo建站工作完成，剩余绑定域名和Hexo主题美化。</p>
<hr>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>作者是在Namesilo购买的域名。</p>
<h2 id="在Namesilo购买域名"><a href="#在Namesilo购买域名" class="headerlink" title="在Namesilo购买域名"></a>在Namesilo购买域名</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>进入<a href="https://www.namesilo.com/">Namesilo</a>网站，点击右上角的<code>Login</code>进入账号注册界面，输入所有必要信息后，点击<code>Creat Account</code>完成账号注册。</p>
<p><strong>注意：此时账号处于非激活状态，作者当时是在进行到付款操作的时候才提示进一步完善信息并接收验证码激活的。</strong></p>
<h3 id="完成购买"><a href="#完成购买" class="headerlink" title="完成购买"></a>完成购买</h3><p>返回<a href="https://www.namesilo.com/">Namesilo主界面</a>，在网页中间的文本框中输入想要购买的域名，比如作者输入的<code>lliang</code>，然后点击右侧的<code>SEARCH DOMAIN</code>。</p>
<p>等待界面完成刷新后，在显示出来的所有域名中，选择自己想要购买的，点击域名右侧的<code>add</code>，继续点击<code>Checkout</code>。</p>
<p>在新页面中，<code>Auto-Renew</code>选择<code>No</code>，<code>Privacy Setting</code>选择<code>WHOIS Privacy</code>，<code>Set all years to</code>选择<code>1</code>，在<code>Have a Coupon or Promotion Code?</code>下的文本框中输入<code>okoff</code>或<code>go2think</code>并点击<code>Submit</code>。</p>
<p>点击<code>CONTINUE--&gt;</code>，跳转到支付界面，使用支付宝完成购买。</p>
<h2 id="在DNSPod解析域名"><a href="#在DNSPod解析域名" class="headerlink" title="在DNSPod解析域名"></a>在DNSPod解析域名</h2><h3 id="注册账号-1"><a href="#注册账号-1" class="headerlink" title="注册账号"></a>注册账号</h3><p>进入<a href="https://www.dnspod.cn/?s_url=https://www.dnspod.com/&lang=zh">DNSPod</a>，点击右上角的<code>免费注册</code>进入注册界面，填写信息完成注册。</p>
<h3 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h3><p>注册完毕后进行登录，点击右上角的<code>管理控制台</code>，在新页面中点击左侧的<code>DNS解析</code>下的<code>我的域名</code>,点击页面中的<code>添加域名</code>，在文本框中输入在Namesilo中购买的域名，点击<code>确认</code>。</p>
<h3 id="修改Namesilo中的NS记录"><a href="#修改Namesilo中的NS记录" class="headerlink" title="修改Namesilo中的NS记录"></a>修改Namesilo中的NS记录</h3><p>点击刚刚添加的域名，可看到DNSPod提供的两条默认的NS记录，记下这两条记录。</p>
<p>登录Namesilo，点击右上角的头像，选择<code>My Account</code>，再点击右上角的<code>Manege My Domains</code>。</p>
<p>勾选域名，点击页面中的<code>Change Nameservers</code>。</p>
<p>在新页面中，删除<code>NameServer</code>文本框中原有的内容，填入刚刚记下的两条记录，点击<code>SUBMIT</code>。</p>
<p><strong>注意：此操作需等待10分钟到48小时才会生效，作者大概等了10分钟就生效了。</strong><br><strong>注意：生效后，在<code>Manege My Domains</code>页面中，可以看到域名的<code>Status</code>一列显示为<code>Active</code>。</strong></p>
<h3 id="在DNSPod中添加解析"><a href="#在DNSPod中添加解析" class="headerlink" title="在DNSPod中添加解析"></a>在DNSPod中添加解析</h3><p>在<code>DNSPod-管理控制台-DNS解析-我的域名</code>页面，点击已添加的域名，除默认存在的两条<code>NS</code>类型的记录外，再通过<code>添加记录</code>增加下述3条记录：</p>
<table>
<thead>
<tr>
<th><center> 主机记录 </center></th>
<th><center> 记录类型 </center></th>
<th><center> 记录值 </center></th>
</tr>
</thead>
<tbody><tr>
<td>@</td>
<td>A</td>
<td>185.199.108.153</td>
</tr>
<tr>
<td>@</td>
<td>A</td>
<td>185.199.110.153</td>
</tr>
<tr>
<td>www</td>
<td>CHAME</td>
<td>xxxxxx.github.io</td>
</tr>
</tbody></table>
<p><strong>注意：<code>xxxxxx.github.io</code>是GitHub账号的仓库网址,其中<code>xxxxxx</code>是GitHub账户名。</strong></p>
<h3 id="本地添加CHAME文件"><a href="#本地添加CHAME文件" class="headerlink" title="本地添加CHAME文件"></a>本地添加CHAME文件</h3><p>在Hexo本地目录的<code>Source</code>文件夹中，新建名为<code>CHAME</code>的无后缀文件，文件中填写购买的域名。</p>
<h3 id="GitHub中添加自定义域名"><a href="#GitHub中添加自定义域名" class="headerlink" title="GitHub中添加自定义域名"></a>GitHub中添加自定义域名</h3><p>登录GitHub，点击右上角头像，选择<code>Your repositories</code>，点击仓库网址<code>xxxxxx.github.io</code>，点击<code>Settings</code>，点击<code>Pages</code>，在<code>Custom domain</code>文本框中输入购买的域名，点击<code>Save</code>，勾选<code>Enforce HTTPS</code>。</p>
<p>生效后，界面中出现<code>√ Your site is published at https://xxxxxx/</code>，其中<code>xxxxxx</code>是购买的域名。</p>
<p>完成以上操作后，就可以通过购买的域名访问自己的Blog了。</p>
<hr>
<h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><p>作者用到的部分设置。</p>
<h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>将主题由默认修改为Next。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>作者使用的是Next主题。</p>
<!-- 信息过期已被注释，时间：2022-11-10 -->
<!-- 在Git Bash中输入指令： -->
<!-- ``` -->
<!-- cd /d/BigDog/Document/Github/Hexo                       # 目录转到Hexo根目录 -->
<!-- git clone https://github.com/next-theme/theme-next-docs # 下载Next主题 -->
<!-- ``` -->

<p>下载地址：<a href="https://github.com/theme-next/hexo-theme-next" title="Next制作团队的Github主页">Next主题下载地址</a>，点击页面中的<code>Code</code>，点击弹出菜单中的<code>Download ZIP</code>，开始下载。<br>下载完成后，解压到根目录中的<code>themes</code>文件夹中，并将解压出来的文件夹重新命名为<code>next</code>。</p>
<h3 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h3><p>打开<code>D:\BigDog\Document\Github\Hexo</code>目录中的站点配置文件<code>_config.yml</code>，找到<code>theme</code>设置一行，将其修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p><strong>注意：在<code>:</code>后存在一个空格。</strong></p>
<h2 id="细节修改"><a href="#细节修改" class="headerlink" title="细节修改"></a>细节修改</h2><p>具体细节处的修改。</p>
<h3 id="增加文章检索功能"><a href="#增加文章检索功能" class="headerlink" title="增加文章检索功能"></a>增加文章检索功能</h3><p>即搜索功能。</p>
<p>安装一个插件，在Git Bash中输入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>目录<code>D:\BigDog\Document\Github\Hexo</code>中的文件<code>_config.yml</code>是站点配置文件；</li>
<li>目录<code>D:\BigDog\Document\Github\Hexo\theme\next</code>中的文件<code>_config.yml</code>是主题配置文件；</li>
<li><strong>后续以<code>站点配置文件</code>和<code>主题配置文件</code>对二者进行区分。</strong></li>
</ul>
<p>在<code>站点配置文件</code>末尾添加信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 本地搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 100</span><br></pre></td></tr></table></figure>

<p>在<code>主题配置文件</code>中修改部分信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: ture</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<h3 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h3><p>打开<code>D:\BigDog\Document\Github\Hexo</code>目录中的站点配置文件<code>_config.yml</code>，修改以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 雪亮的个人博客</span><br><span class="line">subtitle: 今天不学习，明天变垃圾；是学习赋予了我优雅从容的狗生</span><br><span class="line">description: 本垃圾狗的狗窝</span><br><span class="line">keywords: 关键字是个什么东西</span><br><span class="line">author: 雪亮</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">url: http://lliang.top</span><br></pre></td></tr></table></figure>

<h3 id="新建tags页面"><a href="#新建tags页面" class="headerlink" title="新建tags页面"></a>新建tags页面</h3><p>即创建一个按标签对文章进行分类的页面。</p>
<p>在<code>主题配置文件</code>中搜索<code>menu:</code>，可找到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  #tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<p>去除<code>tags</code>所在行最前面的<code>#</code>。</p>
<p>在Git Bash中输入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>打开目录<code>D:\BigDog\Document\Github\Hexo\source\tags</code>中的文件<code>index.md</code>，修改信息（时间随意修改）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-06-22 23:42:58</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="新建categories页面"><a href="#新建categories页面" class="headerlink" title="新建categories页面"></a>新建categories页面</h3><p>即创建一个文章分类的界面。</p>
<p>在<code>主题配置文件</code>中搜索<code>menu:</code>，可找到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<p>去除<code>categories</code>所在行最前面的<code>#</code>。</p>
<p>在Git Bash中输入指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>打开目录<code>D:\BigDog\Document\Github\Hexo\source\categories</code>中的文件<code>index.md</code>，修改信息（时间随意）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-06-22 23:46:16</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><!-- 在文章的表头（即包含`title`等的区域）添加`sticky: 1`属性，数值越大则置顶的优先级越高。 -->

<h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>在Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>打开目录<code>/themes/next/layout/_macro</code>下名为<code>post.swig</code>的配置文件，搜索<code>post-meta</code>，可找到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>，找到其下的第一个包含<code>span</code>的行，并在下一行插入以下内容（注意对齐和缩进）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=823935&gt;📌置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文章属性"><a href="#文章属性" class="headerlink" title="文章属性"></a>文章属性</h4><p>在需要置顶的文章的开始部分（即包含<code>title</code>和<code>time</code>等的地方），加入<code>top: 1</code>，数值越大则优先级越高。</p>
<h3 id="选择Next主题样式"><a href="#选择Next主题样式" class="headerlink" title="选择Next主题样式"></a>选择Next主题样式</h3><p>在<code>主题配置文件</code>中搜索<code>Schemes</code>，可找到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>Next提供4种样式，注释掉不需要的3个。这里可以看到作者使用的是<code>Gemini</code>样式。</p>
<h3 id="更换网页图标"><a href="#更换网页图标" class="headerlink" title="更换网页图标"></a>更换网页图标</h3><p>你应该注意到了，作者使用的网页图标是一个可爱的狗头！</p>
<p>下载大小是<code>16x16</code>和<code>32x32</code>，格式是<code>ico</code>的两张同样内容的图片，放在<code>/themes/next/source/images</code>目录下。<br>在<code>主题配置文件</code>中搜索<code>favicon</code>，可找到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/dog-16x16.ico</span><br><span class="line">  medium: /images/dog-32x32.ico</span><br></pre></td></tr></table></figure>

<p>对应替换掉<code>dog-16x16.ico</code>和<code>dog-32x32.ico</code>即可。</p>
<h3 id="等待更新"><a href="#等待更新" class="headerlink" title="等待更新"></a>等待更新</h3><p>…</p>
<hr>
<br>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://tding.top/archives/aad98408.html#more" title="他人博客">Hexo搭建个人博客文章汇总</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1695555?from=article.detail.1173652" title="腾讯云">低成本个人建站系列二————使用Hexo+GitHub搭建个人免费博客</a></li>
<li><a href="https://blog.csdn.net/mukes/article/details/115693833" title="CSDN">Git详解安装步骤</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33921436" title="知乎">Namesilo域名购买及使用教程</a></li>
<li><a href="https://theme-next.js.org/docs/getting-started/" title="官网">Getting Started |Next</a></li>
</ul>
]]></content>
      <categories>
        <category>blog搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>羊皮纸制作过程</title>
    <url>/2022/11/11/%E7%BE%8A%E7%9A%AE%E7%BA%B8%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>羊皮纸是如何制作的，能够在普通环境中保存多久。</p>
<span id="more"></span>

<hr>
<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>公元前170年左右，安纳托利亚古国帕加马的国王欧迈尼斯二世率先使用羊皮纸。</p>
<hr>
<h1 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h1><ul>
<li>剥皮：剥下适龄的羊皮或小牛皮。</li>
<li>浸泡：将<strong>刚刚</strong>剥下的皮（原始方法带有皮毛）一起浸泡于石灰水中，溶解皮中胶质等物质。</li>
<li>刮皮：将浸泡<strong>数周</strong>的皮捞出拉伸并刮去皮上的毛。</li>
<li>晾晒：将刮皮后的皮再次拉伸晾晒。</li>
<li>涂抹保存剂：将处理好的羊皮纸，进行数次的防腐工程（次数不定）。</li>
</ul>
<hr>
<h1 id="保存期限"><a href="#保存期限" class="headerlink" title="保存期限"></a>保存期限</h1><p>普通环境下，肯动比人的寿命要长的多，具体未知。</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BE%8A%E7%9A%AE%E7%B4%99" title="维基百科">羊皮纸</a></li>
</ul>
]]></content>
      <categories>
        <category>疑问</category>
      </categories>
      <tags>
        <tag>疑问</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么有人不能吃苹果</title>
    <url>/2022/11/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E4%BA%BA%E4%B8%8D%E8%83%BD%E5%90%83%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<p>从生物学的角度，如何解释有人喜欢苹果，有人讨厌苹果。</p>
<span id="more"></span>

<hr>
<h1 id="客观原因"><a href="#客观原因" class="headerlink" title="客观原因"></a>客观原因</h1><h2 id="蔷薇科水果过敏"><a href="#蔷薇科水果过敏" class="headerlink" title="蔷薇科水果过敏"></a>蔷薇科水果过敏</h2><p>因进食蔷薇科水果引起的过敏反应，分为致敏和发敏两个阶段。</p>
<ul>
<li>第一次吃蔷薇科水果，食物过敏源进入人体，选择性地诱导机体产生特异性免疫，使人体处于致敏状态。</li>
<li>再次摄入相同过敏原时，过敏原诱导处于致敏状态地免疫细胞释放活性介质，活性介质作用于机体各组织器官，从而引起各种症状，如荨麻疹、口腔综合征等。</li>
</ul>
<p>其他常见的蔷薇科水果：桃、樱桃、梨、山楂、枇杷、木瓜、草莓、李、杏等。</p>
<hr>
<h1 id="主观原因"><a href="#主观原因" class="headerlink" title="主观原因"></a>主观原因</h1><p>人云亦云了，味道、心理创伤等。</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://dxy.com/disease/27411/detail" title="丁香医生">蔷薇科水果过敏</a></li>
</ul>
]]></content>
      <categories>
        <category>疑问</category>
      </categories>
      <tags>
        <tag>疑问</tag>
        <tag>人体</tag>
      </tags>
  </entry>
  <entry>
    <title>大脑如何忽略无用信息</title>
    <url>/2022/11/11/%E5%A4%A7%E8%84%91%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5%E6%97%A0%E7%94%A8%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>问题：人脑会被动地忽略部分视觉和听觉信息，如何实现的；能否衍生到人利用此特性有意识地主动去忽略信息。</p>
<span id="more"></span>

<hr>
<h1 id="大脑加工信息"><a href="#大脑加工信息" class="headerlink" title="大脑加工信息"></a>大脑加工信息</h1><p>认知心理学家认为，大脑是信息加工系统，其关注的核心是刺激输入和反应输出之间发生的内部心里过程，即“信息加工”的过程。<br>其将信息加工的方式分为2种：<strong>并行加工&#x2F;串行加工</strong>，<strong>自下而上&#x2F;自上而下加工</strong>。  </p>
<ul>
<li>并行加工：同时对多个刺激进行加工。<br>  如，在一堆圆形为主的图中找到三角形。</li>
<li>串行加工：每次只对一个刺激进行加工，完成后再加工下一个刺激。<br>  如，阅读文章。<br></li>
<li>自下而上加工：又叫数据驱动加工。由刺激的特征决定是否、如何进行加工。<br>  如，它可以解释为什么我们会在，以白色圆形为主的图中，优先看到红色的圆形（特征明显）。</li>
<li>自上而下加工：又叫概念驱动加工。以经验知识为基础进行的加工（<strong>任务&#x2F;目的导向？</strong>）。<br>  如，人主动地在一堆信息中，寻找指定的信息。</li>
</ul>
<hr>
<h1 id="大脑过滤信息"><a href="#大脑过滤信息" class="headerlink" title="大脑过滤信息"></a>大脑过滤信息</h1><p>大脑复杂的神经环路中，存在特别的<strong>闸门机制</strong>对相关信息进行识别，并将其在准确的时间送到准确的地点。</p>
<p><strong>抑制性神经元</strong>通过抑制其他神经元、已经平衡刺激神经元活动的兴奋性神经元，来确保人类对于外界刺激给予适当的神经反应。</p>
<p>抑制性神经元是大脑神经环路的一个基本元素，其可以让一个神经环路选择性地给一些信息打开特别地进入通道，并同时过滤掉其他信息。</p>
<hr>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>找到的有效信息不多，目前的结论是：</p>
<ul>
<li>通过抑制性神经元来过滤信息。</li>
<li>不能主动利用此特性，就像我们不能控制自己的脂肪燃烧，肌肉增长一样。</li>
</ul>
<hr>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://www.zhihu.com/question/31365318" title="知乎">人是如何自动过滤信息的</a></li>
<li><a href="https://shanghai.nyu.edu/cn/news/nao-ru-he-guo-lu-wu-guan-xin-xi" title="校园官网">科学家模拟大脑如何过滤无关信息</a></li>
</ul>
]]></content>
      <categories>
        <category>疑问</category>
      </categories>
      <tags>
        <tag>疑问</tag>
        <tag>人体</tag>
      </tags>
  </entry>
  <entry>
    <title>目的与理解</title>
    <url>/2022/11/10/%E7%9B%AE%E7%9A%84%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>为了目的而行动，为了理解而行动。</p>
<span id="more"></span>

<hr>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><blockquote>
<p><strong>我们为了目的，而不是为了理解，去行动。</strong></p>
</blockquote>
<p><strong>注意：这里存在一个思维误区，即将<code>理解</code>也当作一个目的；此文中<code>目的</code>和<code>理解</code>是平级的关系，请不要建立从属关系。</strong></p>
<p>因为<code>银铃般的笑声</code>这个比喻，慢慢地思考到了这一点。</p>
<ul>
<li>想到这个比喻的时候，我在想这个笑声一定很美，因为包含这个比喻的话是一句夸赞人的话。</li>
<li>在我看过的仅有的几部电视剧，和看的还算比较多的电影中，虽然回忆不起来，但绝对是听到过不少很好听的笑声的，不过因为是电视剧、电影而不是纪录片，所以这个好听的笑声大多时候属于女性。</li>
<li>在现实中也听到过很多好听的笑声，男生和女生的应该都有。</li>
<li>我想，如果是要去写一篇作文性质的文章去描述他们的笑声，我应当会使用这个比喻。</li>
<li>那么问题来了，我从未见过银铃，铃铛见得都很少，所以用一个比较极端的说法来形容我这个行为的话，那就是——<strong>我为了文章能够因为华丽而获得高分选择了说谎</strong>（即用我并不了解的东西来形容笑声）。</li>
<li>这其实是一件很小的，微不足道的事，很明显，我在小题大做，但我也确实很享受这个思考的过程。</li>
<li>我在网上尝试着找了一下这个比喻的出处，希望它是和成语一样出自某个古文，不过并未找到，不过倒是看到了不少有着相似疑惑从而提出问题的人。</li>
</ul>
<p>相似的例子还有，我小学时候用过的一个比喻，这个比喻应该是出自小学语文课本吧——<code>脸红彤彤的像是一个苹果</code>。</p>
<ul>
<li>现在想来，我照样不理解这个比喻，我没有见过那么红的脸，也没见过那么红的苹果。</li>
<li>当然，<strong>这其实并不妨碍我去使用这个比喻来完成任务，虽然我并不理解甚至不认可它</strong>。</li>
</ul>
<p>延申到做饭上，我并不很清楚每个调料的味道和用量，我是出于经验在将饭菜煮熟之后，随意地加入了一些调料。</p>
<ul>
<li>当然，这并不妨碍我吃饱，我觉得味道也尚可。</li>
<li>所以，我达到了我的目的——味道还行且吃饱。</li>
</ul>
<p>延申到考研（推广到所有考试）上，我并不在意我日后是否会<strong>使用</strong>这些知识，我也并不在意我是否真正理解了这些知识，我需要做到的，是写出试卷上相关题目的答案，仅此而已。</p>
<ul>
<li>这两个<code>并不在意</code>，让这段话中描述的这类考研的行为，听起来很是有些舍本逐末的感觉，不过事实也确实是这样，这也可以算作是<strong>考试和工作的区别</strong>。</li>
<li>但这个行为合理吗，很合理，只要给出正确答案，就可以实现考研。</li>
<li>所以，这一行为也可以达到目的。</li>
</ul>
<p>但是，我们确实可以做到更好，如果我们愿意花费时间去理解（分析、思考和整理），那么为什么没有这么做呢。</p>
<blockquote>
<p>为了目的去行动，更加节约时间。</p>
</blockquote>
<p>为了一个明确的定性定量的目的，而去制定计划并采取行动，花费的时间最少。</p>
<ul>
<li>其实应该牵扯到了一个平衡的问题——时间成本和知识积累，其中时间成本是支出，知识积累是收入。</li>
<li>作为一个人类社会中的穷狗，可自由支配的时间极少，从这个条件出发，我们把时间成本压减到最低，非常合理。</li>
</ul>
<hr>
<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><blockquote>
<p>如果一个人的行为方式由达到目的即可改为尽可能地去理解，那么他的生活是否会因为时间不足而崩溃？</p>
</blockquote>
<p>肯定会，因为这种行为方式的最终结果是对整个宇宙的全知全见，而很多天才穷尽几辈人还未完全解开人类大脑的生物、物理属性。</p>
<ul>
<li>所以这种极端的人会把精力聚焦于过多的细枝末节，直至死亡。</li>
<li>当然，这个是举出的极端的例子，现实中将这一特性只运用到某一领域，是个不错的选择。</li>
</ul>
<p>这里其实引出了另一个有趣的问题——我们真的存在不感兴趣的事情吗，还是因为我们不能拥有无限的时间。</p>
<ul>
<li>上个说法比较拗口，换个说法就是——对一件事不感兴趣，是出于讨厌还是时间不够。</li>
<li>这样来想的话，似乎讨厌和时间不够都可以单独地作为不感兴趣的原因。</li>
<li>从讨厌的角度去讨论的话，这个问题就复杂化了，这涉及到了<code>赋予某件客观事物主观认为上的意义</code>。</li>
<li>所以这个问题就先略过了。</li>
</ul>
<hr>
<h1 id="功利性"><a href="#功利性" class="headerlink" title="功利性"></a>功利性</h1><blockquote>
<p>只求达到目的的行动方式，是否会导致强烈的追求短期功利（即要求及时回报）的思维方式。</p>
</blockquote>
<p>这种行动方式长期以往，是否会使我们失去追求长远利益的能力，个人认为会。</p>
<ul>
<li>我们的生活，是否就是为了完成一个又一个的目的。<ul>
<li>说是，可以解释的通——因为可以这样说，我们做的每一件事都有目的。</li>
<li>说不是，也可以解释的通——因为我们确实会没有目的地地去散步、仅仅因为好看而非必须地购物、似乎是为了消遣和娱乐地刷短视频。</li>
</ul>
</li>
<li>当然，我们也可以说是这个人的目标没设对，从而导致了短视的思维。</li>
<li>这是否会在未来的某一时刻导致什么后果。</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>个人想法。</p>
<ul>
<li><code>目的</code>强调的是实现，<code>理解</code>强调的是积累。</li>
<li><code>目的</code>的时间成本较低。</li>
<li><code>理解</code>积累下的信息（知识），存在一定的可能性在将来可以用到（即存在在将来创造优势或机遇的可能性）。</li>
<li>维持平衡很重要，问题的本质其实是<code>时间</code>。</li>
<li><code>银铃声</code>和<code>好听的笑声</code>应该在音色和音调上无太大的相似之处，大概只是给人的主观感觉都很美好，故有此比喻。</li>
</ul>
<br>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://v.qq.com/x/page/m3157psw0wy.html" title="腾讯视频">真正的银铃的声音</a></li>
</ul>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>神经病噢</tag>
      </tags>
  </entry>
  <entry>
    <title>创口贴工作过程</title>
    <url>/2022/11/10/%E5%88%9B%E5%8F%A3%E8%B4%B4%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>简单描述了创口贴的部分信息。</p>
<span id="more"></span>

<hr>
<h1 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h1><p>我习惯叫这个东西为<code>创可贴</code>，不过根据网上查到的信息，在《医疗器械分类目录》中已不存在<code>创可贴</code>的说法，统一称为<code>创口贴</code>。</p>
<hr>
<h1 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h1><p>与其说是创口贴的工作过程，不如说是创口贴<strong>参与</strong>人体小伤口修复的过程。</p>
<h2 id="人体出现小伤口"><a href="#人体出现小伤口" class="headerlink" title="人体出现小伤口"></a>人体出现小伤口</h2><p>小创口（伤口）在流血，血液中的血小板和凝血酶发生凝血反应。</p>
<p>此时可使用创口贴加速止血，因为部分创口贴含有加速凝血的成分。</p>
<h2 id="止血后伤口结疤"><a href="#止血后伤口结疤" class="headerlink" title="止血后伤口结疤"></a>止血后伤口结疤</h2><p>血管破损止住后，伤口边缘分泌含有大量白细胞和纤维组织的体液，覆盖伤口，蒸发水分，开始结痂。</p>
<p>此时不应再使用普通的创口贴，因为创口贴会吸走分泌的体液，会延长结痂时间，伤口与外界接触时间变长，增加感染几率。</p>
<h2 id="结痂后伤口修复"><a href="#结痂后伤口修复" class="headerlink" title="结痂后伤口修复"></a>结痂后伤口修复</h2><p>伤口结痂后，纤维化的组织给伤口搭框架，脂肪血管淋巴等结缔组织在框架上生长，称为肉芽，肉芽很脆弱但生长快，不过只用于临时保护伤口。</p>
<p>此时可以使用创口贴覆盖伤口（结的痂），保护肉芽不被破坏，直至伤口内部慢慢修复并替换掉肉芽。</p>
<p>等到结痂脱落，伤口就算愈合了。</p>
<hr>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>小伤口修复过程中，可以使用创口贴的两个阶段：</p>
<ul>
<li>伤口流血，需要止血的时候。</li>
<li>结痂后的创口修复期。</li>
</ul>
<hr>
<br>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://www.zhihu.com/question/35260091" title="知乎">到底是创可贴还是创口贴</a></li>
<li><a href="https://www.zhihu.com/question/266148435/answer/311349742" title="知乎">创可贴是该被称道的发明，还是该被淘汰</a></li>
</ul>
]]></content>
      <categories>
        <category>疑问</category>
      </categories>
      <tags>
        <tag>疑问</tag>
        <tag>人体</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2022/11/10/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>介绍了使用Markdown做记录时会用到的基本语法。</p>
<span id="more"></span>

<hr>
<h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>添加<code>#</code>，实现标题。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>## 这是二级标题</code></td>
<td><font size=5><strong>这是二级标题</strong></font></td>
</tr>
<tr>
<td><code>###### 这是六级标题</code></td>
<td><font size=2>这是六级标题</font></td>
</tr>
</tbody></table>
<p>注意：<code>#</code>后需要添加一个空格。<br>注意：共有6级标题。</p>
<hr>
<h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>在行尾添加“结尾空格”（在一行的末尾添加一个或者多个空格），或添加<code>&lt;br&gt;</code>，实现换行。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>第1行。</code> <code> </code><br><code>第2行。</code></td>
<td>第1行。<br>第2行。</td>
</tr>
<tr>
<td><code>第1行。&lt;br&gt;</code><br><code>第2行。</code></td>
<td>第1行。<br>第2行。</td>
</tr>
</tbody></table>
<hr>
<h1 id="换段语法"><a href="#换段语法" class="headerlink" title="换段语法"></a>换段语法</h1><p>添加1行空白行来开始下一段。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>第1段第1行。</code> <code> </code><br><code>第1段第2行。</code><br><br><code>第2段第1行。</code> <code> </code><br><code>第2段第2行。</code></td>
<td>第1段第1行。<br>第1段第2行。<br><br>第2段第1行。<br>第2段第2行。</td>
</tr>
</tbody></table>
<hr>
<h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><p>添加不同数量的<code>*</code>，可将文本设置为粗体或斜体。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>预览效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>**粗体**：你**好**啊</code></td>
<td><strong>粗体</strong>：你<strong>好</strong>啊</td>
</tr>
<tr>
<td><code>*斜体*：你*好*啊</code></td>
<td><em>斜体</em>：你<em>好</em>啊</td>
</tr>
<tr>
<td><code>***粗体+斜体***：你 ***好*** 啊</code></td>
<td><em><strong>粗体+斜体</strong></em>：你 <em><strong>好</strong></em> 啊</td>
</tr>
</tbody></table>
<hr>
<h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><p>段落前添加<code>&gt;</code>，可创建块引用。</p>
<h2 id="单个段落"><a href="#单个段落" class="headerlink" title="单个段落"></a>单个段落</h2><p>Markdown语言示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 你好啊，我是赛利亚  </span><br><span class="line">滚，我是哥布林</span><br></pre></td></tr></table></figure>

<p>注意1：<code>&gt;</code>后按个人习惯可选择是否添加一个空格。<br>注意2：示例的第一行有用于换行的结尾空格，下述示例同样。</p>
<p>预览效果：</p>
<blockquote>
<p>你好啊，我是赛利亚<br>滚，我是哥布林</p>
</blockquote>
<h2 id="多个段落"><a href="#多个段落" class="headerlink" title="多个段落"></a>多个段落</h2><p>段落之间的空白行也添加<code>&gt;</code>。</p>
<p>Markdown语言示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 你好啊，我是赛利亚。  </span><br><span class="line">滚，我是哥布林。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 好小子，敢凶我，老娘要叫人了。  </span><br><span class="line">叫，我哥布林怕过谁。</span><br></pre></td></tr></table></figure>

<p>预览效果：</p>
<blockquote>
<p>你好啊，我是赛利亚。<br>滚，我是哥布林。</p>
<p>好小子，敢凶我，老娘要叫人了。<br>叫，我哥布林怕过谁。</p>
</blockquote>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>在块引用中嵌套块引用，使用<code>&gt;&gt;</code>。</p>
<p>Markdown语言示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 你好啊，我是赛利亚。  </span><br><span class="line">滚，我是哥布林。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 好小子，敢凶我，来娘要叫人了。  </span><br><span class="line">叫，我哥布林怕不过。</span><br><span class="line">&gt;&gt; 李布林说过————狭路相逢勇者胜！</span><br><span class="line">&gt;</span><br><span class="line">&gt; 第二天，医院里多出了两位病人，一个叫神枪谁，一个叫鬼剑士。</span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<blockquote>
<p>你好啊，我是赛利亚。<br>滚，我是哥布林。</p>
<p>好小子，敢凶我，来娘要叫人了。<br>叫，我哥布林怕不过。</p>
<blockquote>
<p>李布林说过————狭路相逢勇者胜！</p>
</blockquote>
<p>第二天，医院里多出了两位病人，一个叫神枪谁，一个叫鬼剑士。</p>
</blockquote>
<h2 id="块引用中使用Markdown的其他元素"><a href="#块引用中使用Markdown的其他元素" class="headerlink" title="块引用中使用Markdown的其他元素"></a>块引用中使用Markdown的其他元素</h2><p>如添加粗体、斜体、代码、标题等。</p>
<p>注意：不建议添加标题元素，会造成目录中的标题混乱。</p>
<hr>
<h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>分为有序列表和无序列表。</p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用<code>数字</code>+<code>.</code>+<code>空格</code>创建有序列表，使用<code>Tab</code>缩进创建子列表。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 水果的营养</span><br><span class="line">2. 蔬菜的营养</span><br><span class="line">   1. 胡萝卜的营养</span><br><span class="line">   2. 大白菜的营养</span><br><span class="line">   3. 西红柿的营养</span><br><span class="line">   4. 西兰花的营养</span><br><span class="line">3. 肉类的营养</span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<ol>
<li>水果的营养</li>
<li>蔬菜的营养<ol>
<li>胡萝卜的营养</li>
<li>大白菜的营养</li>
<li>西红柿的营养</li>
<li>西兰花的营养</li>
</ol>
</li>
<li>肉类的营养</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用<code>-</code>（或者<code>*</code>、<code>+</code>）+<code>空格</code>创建无序列表，使用<code>Tab</code>缩进创建子列表。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 拿起筷子</span><br><span class="line">  - 眼看到筷子</span><br><span class="line">  - 手拿起筷子</span><br><span class="line">- 夹菜</span><br><span class="line">- 把菜放进嘴里</span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<ul>
<li>拿起筷子<ul>
<li>眼看到筷子</li>
<li>手拿起筷子</li>
</ul>
</li>
<li>夹菜</li>
<li>把菜放进嘴里</li>
</ul>
<p>注意：不要将<code>-</code>、<code>*</code>、<code>+</code>混合使用（原因可能是改变符号被判定为换段）。</p>
<h2 id="列表中嵌套其他元素"><a href="#列表中嵌套其他元素" class="headerlink" title="列表中嵌套其他元素"></a>列表中嵌套其他元素</h2><p>保留列表连续性的同时，嵌套其他元素，该元素前需添加4个<code>空格</code>（相当于1个<code>Tab</code>），不同元素间需用<code>空白行</code>分开。</p>
<p>Markdown语言示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 做饭，吃饭</span><br><span class="line">2. 洗碗，刷筷</span><br><span class="line"></span><br><span class="line">    &gt; 不做饭的人去洗碗，天经地义。————哥布迅</span><br><span class="line"></span><br><span class="line">3. 把碗放到柜子里</span><br><span class="line">4. 休息</span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<ol>
<li><p>做饭，吃饭</p>
</li>
<li><p>洗碗，刷筷</p>
<blockquote>
<p>不做饭的人去洗碗，天经地义。————哥布迅</p>
</blockquote>
</li>
<li><p>把碗放到柜子里</p>
</li>
<li><p>休息</p>
</li>
</ol>
<p>上例为列表嵌套块引用的方法，嵌套段落、图片、列表、围栏代码块时方法同理。</p>
<hr>
<h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><p>使用<code>`</code>书写代码或代码块。</p>
<h2 id="词汇或短句"><a href="#词汇或短句" class="headerlink" title="词汇或短句"></a>词汇或短句</h2><p>将文本放入<code>``</code>中。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>示例效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>Hexo上传文章的指令：`hexo d -g`</code></td>
<td>Hexo上传文章的指令：<code>hexo d -g</code></td>
</tr>
</tbody></table>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>将代码块放入<code>``` ```</code>中。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>示例效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>```</code><br><code>hexo g</code><br><code>hexo d</code><br><code>```</code></td>
<td><code>-hexo g</code><br><code>-hexo d</code></td>
</tr>
</tbody></table>
<hr>
<h1 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h1><p>使用<code>---</code>、<code>***</code>、<code>___</code>创建分割线。为了兼容性，前后均需添加<code>空白行</code>。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<hr>
<p>注意：没什么好注意的。</p>
<hr>
<h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><p>添加链接或网址。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>格式：<code>[超链接显示名](超链接地址 &quot;超链接标题&quot;)</code>。其中<code>超链接显示名</code>是该链接在文章中显示的文本内容，<code>超链接标题</code>是鼠标悬停在超链接上时显示的内容。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学习Markdown请参考 [Markdown基本语法](https://markdown.com.cn/basic-syntax/ &quot;官网&quot;) 。</span><br></pre></td></tr></table></figure>

<p>示例效果：<br>学习Markdown请参考 <a href="https://markdown.com.cn/basic-syntax/" title="官网">Markdown基本语法</a> 。</p>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>可将链接设置为粗体、斜体，或将<code>超链接显示名</code>设置为代码。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学习Markdown请参考 ***[Mardown基本语法](https://markdown.com.cn/basic-syntax/ &quot;官网&quot;)*** 。  </span><br><span class="line">学习Markdown请参考 [`Markdown基本语法`](https://markdown.com.cn/basic-syntax/ &quot;官网&quot;) 。</span><br></pre></td></tr></table></figure>

<p>示例效果：<br>学习Markdown请参考 <em><strong><a href="https://markdown.com.cn/basic-syntax/" title="官网">Mardown基本语法</a></strong></em> 。<br>学习Markdown请参考 <a href="https://markdown.com.cn/basic-syntax/" title="官网"><code>Markdown基本语法</code></a> 。</p>
<h2 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h2><p>把URL放入<code>&lt;&gt;</code>中，使其变为可点击的链接。</p>
<table>
<thead>
<tr>
<th>Markdown语言</th>
<th>示例效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>这是Markdown语法教程的网址： &lt;https://markdown.com.cn&gt; 。</code></td>
<td>这是Markdown语法教程的网址： <a href="https://markdown.com.cn/">https://markdown.com.cn</a> 。</td>
</tr>
</tbody></table>
<hr>
<h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>格式：<code>![替代文本](图片的相对路径 &quot;图片标题&quot;)</code>，其中<code>替代文本</code>是图片失效时用于代替图片的文本，<code>图片标题</code>是鼠标悬停在图片上方时显示的文本。</p>
<p>注意：在Hexo+Github blog中插入图片，需在根目录的<code>source</code>文件夹中创建用于存储图片的文件夹（作者建了名为<code>images</code>的文件夹）。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仅适用于本地浏览： ![测试：插入客户端的图片](/图片/客户端图片.png &quot;这是一张客户端的图片&quot;)</span><br><span class="line"></span><br><span class="line">仅适用于Hexo+Github blog浏览： ![测试：加入服务器端的图片](/images/服务器图片.png &quot;这是一张服务器端的图片&quot;)</span><br></pre></td></tr></table></figure>

<p>示例效果：<br>仅适用于本地浏览： <img src="/%E5%9B%BE%E7%89%87/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9B%BE%E7%89%87.png" alt="测试：插入客户端的图片" title="这是一张客户端的图片"></p>
<p>仅适用于Hexo+Github blog浏览： <img src="/images/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%BE%E7%89%87.png" alt="测试：加入服务器端的图片" title="这是一张服务器端的图片"></p>
<h2 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h2><p>可以给图片增加链接，格式：<code>[![替代文本](图片的相对路径 &quot;图片标题&quot;)](超链接地址)</code>。</p>
<hr>
<h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于控制文本格式的字符（如创建无序列表时用到的<code>-</code>和创建引用时用到的<code>&gt;</code>），需在字符前添加<code>\</code>。</p>
<p>Markdown语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 上山打老虎！</span><br><span class="line"></span><br><span class="line">\&gt; 打到小松鼠！</span><br></pre></td></tr></table></figure>

<p>示例效果：</p>
<blockquote>
<p>上山打老虎！</p>
</blockquote>
<p>&gt; 打到小松鼠！</p>
<p>如果没有<code>\</code>，那么<code>&gt;打到小松鼠！</code>中的<code>&gt;</code>将不会被显示，且<code>打到小松鼠！</code>将处于引用格式。</p>
<h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>字符<code>&lt;</code>和<code>&amp;</code>，详情请查看 <a href="https://markdown.com.cn/basic-syntax/escaping-characters.html" title="官网">特殊字符转义</a> 。</p>
<hr>
<h1 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h1><p>大意是说HTML的代码部分可以直接用到Markdown中，但使用时有一些注意事项，因本人不懂HTML，故本部分跳过。</p>
<hr>
<h1 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h1><p>作者主要用于将过期的信息注释掉。</p>
<p>格式：</p>
<ol>
<li>短句：<code>&lt;!-- 被注释掉的内容 --&gt;</code></li>
<li>段落： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">被注释掉的内容</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
 <strong>注意：Hexo+Github blog中对段落内容进行注释时，只能逐行进行。</strong></li>
</ol>
<hr>
<br>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://markdown.com.cn/basic-syntax/" title="官网">Markdown基本语法</a></li>
<li><a href="https://blog.csdn.net/czg13548930186/article/details/72860942" title="CSDN">Markdown输入空格</a></li>
<li><a href="https://blog.csdn.net/xapxxf/article/details/105133999" title="CSDN">Markdown插入本地图片</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/265077468" title="知乎">Hexo blog插入图片</a></li>
</ul>
]]></content>
      <categories>
        <category>Markdown学习</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
